service: aws-node-rest-api-with-dynamodb-and-offline-news

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMODB_TABLE_USER: ${self:service}-user-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_PROFILE: ${self:service}-profile-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USER}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PROFILE}"

functions:
  signup:
    handler: src/api/user.signup
    events:
      - http:
          path: /v1/public/signup
          method: post
          cors: true
          
  login:
    handler: src/api/user.login
    events:
      - http:
          path: /v1/public/login
          method: post
          cors: true

  updateProfile:
    handler: src/api/profile.updateProfile
    events:
      - http:
          path: /v1/updateProfile
          method: post
          cors: true
          
  getProfile:
    handler: src/api/profile.getProfile
    events:
      - http:
          path: /v1/getProfile
          method: get
          cors: true
  
  
  

  list:
    handler: src/api/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: src/api/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: src/api/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: src/api/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USER}
    
    ProfileDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PROFILE}
